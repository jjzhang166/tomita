# -*- coding: utf-8 -*-


"""Library for generating alphabets and translations C++ code.

The library provides several functions for manipulations  with mappings
(dicts) and classes for code generation from lists and mappings.  The
main code generation class is CodeBuilder, which is the parent class
for all other classes.  In order to create a piece of code with
specific data, you need to create an object of the corresponding class
and pass it to the generate_code() function.  Each code building class
generates some code and defines a list of necessary file headers, which
are managed automatically by the generate_code() function.

"""


import logging


logging.basicConfig(level=logging.ERROR)


def compose(*mappers):

    """Compose a sequence of mappings."""

    keys = set()
    for mapper in mappers:
        keys = keys.union(set(mapper.keys()))

    result = {}
    for symbol in keys:
        result_symbol = symbol
        for mapper in mappers:
            result_symbol = mapper.get(result_symbol, result_symbol)
        result[symbol] = result_symbol

    return result


def reverse_mapping(mapping):
    """Reverse the keys and values in the mapping.

    Considering values are unique.

    """
    result = dict((value, key) for key, value in mapping.items())
    assert len(result) == len(mapping), "Values must be unique."
    return result


def merge(*mappers):
    """Merge a sequence of mappings.

    Considering keys do not intersect.

    """
    result = {}
    for mapper in mappers:
        result.update(mapper)
    return result


def _remove_nonchanging(mapping):
    """Remove the pairs where key matches value from the mapping.

    This is necessary to reduce the resulting generated code size.

    """
    return dict((key, value) for key, value in mapping.items() if key != value)


def _mapping_to_lists(mapping):

    """Generate lists with 'from' and 'to' values by a mapping."""

    list_from = []
    list_to = []
    for key, value in mapping.items():
        list_from.append(key)
        list_to.append(value)

    return list_from, list_to


class CodeBuilder(object):

    """The base class for all code generation classes.

    All inheritors have to override the main code generation functions:
        generate_code - this function returns the code generated by the
            object (except 'headers', see get_cpp_headers)
        get_cpp_headers - this function returns the list of lines that
            must be present in the header so that the generated code
            can work correctly.

    """

    def generate_code(self):
        return ''
    def __str__(self):
        return 'CodeBuilder()'
    def get_cpp_headers(self):
        return ()


class ConstantCode(CodeBuilder):

    """Generate code for C++ constants."""

    def __init__(self, type_, name, value):
        self.type_ = type_
        self.name = name
        self.value = value

    __CODE_TEMPLATE = "const {type_} {name} = {value};\n"

    def generate_code(self):
        return self.__CODE_TEMPLATE.format(
            type_=self.type_, name=self.name, value=self.value)

    def __str__(self):
        return "ConstantCode(name={name})".format(name=self.name)


class StaticArrayCode(CodeBuilder):

    """Generate code for static arrays with given elements.

    The elements may be generic, but it is necessary to define a
    function to convert element to their string representation.

    """

    def __init__(self, header, elements, element_to_code=lambda x:x):
        self.header = header
        elements_codes = map(element_to_code, elements)
        self.elements_code = ', '.join(elements_codes + ['0'])

    __CODE_TEMPLATE = "{header}[] = {{ {elements} }};\n"

    def generate_code(self):
        return self.__CODE_TEMPLATE.format(header=self.header,
                                           elements=self.elements_code)

    def __str__(self):
        return "StaticArrayCode(header={header})".format(header=self.header)


def str_to_hex(symbol):
    """Get string hex representation of the symbol."""
    return hex(ord(symbol))


class TCharStaticArrayCode(StaticArrayCode):

    """Generate code for static array of TChar elements.

    The elements of the array must be unicode symbols, and they are
    converted to the corresponding hex string representations.

    """

    def __init__(self, name, elements):
        header = 'const TChar ' + name
        assert all(isinstance(el, unicode) and len(el) == 1 for
                   el in elements), \
               "All array elements must be unicode strings of length 1."
        StaticArrayCode.__init__(self, header, elements, str_to_hex)


class TCharStaticArrayPackCode(CodeBuilder):

    """Generate code for a pack of static TChar array.

    The generated code contains data for a list of arrays with
    different names.  The names can be retrieved from 'names'
    attribute.  The names_prefix constructor argument must be chosen
    so that no other names in code have this prefix.

    """

    def __init__(self, names_prefix, lists):
        self.names_prefix = names_prefix
        self.lists = lists
        self.names = [names_prefix + str(index) for
                      index in xrange(len(self.lists))]

    def generate_code(self):
        result_parts = []
        for name, elements in zip(self.names, self.lists):
            code = TCharStaticArrayCode(name, elements)
            result_parts.append(code.generate_code())
        return ''.join(result_parts)

    def __str__(self):
        return "TCharStaticArrayPackCode(names_prefix={names_prefix})".format(
            names_prefix=self.names_prefix)


class TTrClassCode(CodeBuilder):

    """Generate code for a TTr class inheritor.

    The class depends on three tables: 'simple' mapping table (one
    symbol to one symbol), 'advanced' mapping table (one symbol to
    several symbols) and 'kill' symbols (symbols that are removed
    completely).  First two are passed a single dict which must have
    unicode symbols as keys and unicode non-empty strings as values
    (they are automatically sorted to 'simple' and 'advanced') and a
    list of symbols to remove.

    The generated code contains the class and all necessary static
    arrays declarations.

    """

    def __init__(self, name, replace_mapping, remove_symbols=()):
        self.name = name
        self.constants_prefix = self.name.upper() + '_AUX_'
        self.remove = remove_symbols

        # sort symbols to 'simple' and 'advanced'
        self.replace_one_symbol = {}
        self.replace_several_symbols = {}
        for symbol, replacement in replace_mapping.items():
            assert isinstance(symbol, unicode), \
                "Source symbols must be unicode strings."
            assert len(symbol) == 1, "Source symbols must have length of 1."
            assert isinstance(replacement, unicode), \
                "Replacement symbols must be unicode strings."
            assert len(replacement) > 0, \
                "Replacement symbols must have non-zero length."

            if len(replacement) == 1:
                self.replace_one_symbol[symbol] = replacement
            else:
                self.replace_several_symbols[symbol] = replacement

        self.replace_one_symbol = _remove_nonchanging(self.replace_one_symbol)

    __CLASS_CODE_TEMPLATE = (
        "struct {name}: public TTr {{\n"
        "    {name}()\n"
        "        : TTr({from_}, {to}, {remove}, {adv_from}, {adv_to})\n"
        "    {{}}\n"
        "}};\n"
    )

    __EMPTY_ARRAY_NAME = 'NULL'


    def __generate_replace_single(self, result_parts):

        """Generate code for simple mapping.

        The 'result_parts' argument is a list that is modified by this
        function (all necessary code parts are added).

        Return the names of the simple mapping arrays (from and to).

        """

        from_map, to_map = _mapping_to_lists(self.replace_one_symbol)
        from_name = self.constants_prefix + 'FROM'
        to_name = self.constants_prefix + 'TO'

        from_code = TCharStaticArrayCode(from_name, from_map)
        to_code = TCharStaticArrayCode(to_name, to_map)
        result_parts.append(from_code.generate_code())
        result_parts.append(to_code.generate_code())

        return from_name, to_name


    def __generate_remove(self, result_parts):

        """Generate code for removed symbols.

        The 'result_parts' argument is a list that is modified by this
        function (all necessary code parts are added).

        Return the name of the array with removed symbols or 'NULL' if
        there are no symbols to remove.

        """

        if self.remove:
            remove_name = self.constants_prefix + 'KILL'
            remove_code = TCharStaticArrayCode(remove_name, self.remove)
            result_parts.append(remove_code.generate_code())
            return remove_name
        else:
            return self.__EMPTY_ARRAY_NAME


    def __generate_replace_several(self, result_parts):

        """Generate code for removed symbols.

        The 'result_parts' argument is a list that is modified by this
        function (all necessary code parts are added).

        Return the names of the several mapping arrays (from and to).

        """

        if self.replace_several_symbols:
            symbols, replacements = zip(*self.replace_several_symbols.items())
            array_pack = TCharStaticArrayPackCode(
                self.constants_prefix + 'ADV_REPLACE_', replacements)
            result_parts.append(array_pack.generate_code())
            replace_several_from = symbols
            replace_several_to = array_pack.names

            replace_several_from_name = self.constants_prefix + 'ADV_FROM'
            replace_several_to_name = self.constants_prefix + 'ADV_TO'

            replace_several_from_code = TCharStaticArrayCode(
                replace_several_from_name, replace_several_from)
            replace_several_to_code = StaticArrayCode(
                'const TChar* ' + replace_several_to_name,
                replace_several_to)

            result_parts.append(replace_several_from_code.generate_code())
            result_parts.append(replace_several_to_code.generate_code())
            return replace_several_from_name, replace_several_to_name
        else:
            return self.__EMPTY_ARRAY_NAME, self.__EMPTY_ARRAY_NAME


    def generate_code(self):
        result_parts = []

        replace_single_from, replace_single_to = (
            self.__generate_replace_single(result_parts))

        remove_name = self.__generate_remove(result_parts)

        replace_several_from_name, replace_several_to_name = (
            self.__generate_replace_several(result_parts))

        class_code = self.__CLASS_CODE_TEMPLATE.format(
            name=self.name,
            from_=replace_single_from, to=replace_single_to,
            remove=remove_name,
            adv_from=replace_several_from_name, adv_to=replace_several_to_name)
        result_parts.append(class_code)

        return ''.join(result_parts)

    def __str__(self):
        return "TTrClassCode(name={name})".format(name=self.name)

    def get_cpp_headers(self):
        return (
            '#include <library/lemmer/alpha/abc.h>\n',
            'using NLemmer::NDetail::TTr;\n',
        )


class TDiacriticsMapClassCode(CodeBuilder):

    """Generate code for a TDiacriticsMap class inheritor.

    The class depends on a list of diacritics map elements; the
    corresponding static arrays declarations are generated too.

    """

    def __init__(self, name, diacritic_maps):
        self.name = name
        self.diacritic_maps = diacritic_maps

    __CLASS_CODE_TEMPLATE = (
        "class {name}: public TDiacriticsMap {{\n"
        "public:\n"
        "    {name}() {{\n"
        "        {add_maps_code}\n"
        "    }}\n"
        "}};\n"
    )

    __ADD_MAP_CODE_TEMPLATE = "Add({name});\n"

    def generate_code(self):
        result_parts = []

        constants_prefix = self.name.upper() + '_AUX_'

        maps_code = TCharStaticArrayPackCode(constants_prefix,
                                             self.diacritic_maps)
        result_parts.append(maps_code.generate_code())

        add_maps_code_parts = []
        for name in maps_code.names:
            add_code = self.__ADD_MAP_CODE_TEMPLATE.format(name=name)
            add_maps_code_parts.append(add_code)

        class_code = self.__CLASS_CODE_TEMPLATE.format(
            name=self.name, add_maps_code=''.join(add_maps_code_parts))
        result_parts.append(class_code)

        return ''.join(result_parts)

    def __str__(self):
        return "TDiacriticsMapClassCode(name={name})".format(name=self.name)

    def get_cpp_headers(self):
        return (
            '#include <library/lemmer/alpha/abc.h>\n',
            'using NLemmer::TDiacriticsMap;\n',
        )


def _remove_duplicates(sequence):
    """Leave only first occurrence of each element in the sequence.

    The result is a generator.

    """
    elements = set()
    for element in sequence:
        if element not in elements:
            yield element
            elements.add(element)


def generate_code(code_builders, file_):

    """Generate code and write it to the file.

    Arguments:
        code_builders - an iterable of CodeBuilder instances
        file_ - file to write data in

    The '#pragma once' header is added to the code, other headers to
    add are extracted from 'get_cpp_headers' function of the builders.

    """

    header_parts = []
    for builder in code_builders:
        assert isinstance(builder, CodeBuilder), \
            "Builder must inherit from CodeBuilder class"

        logging.debug("Builder " + str(builder) + ", getting C++ header.")
        header_parts += builder.get_cpp_headers()


    file_.write('#pragma once\n')
    for part in _remove_duplicates(header_parts):
        file_.write(part)
    file_.write('\n')

    for builder in code_builders:
        logging.debug("Builder " + str(builder) + ", generating code.")
        code = builder.generate_code()
        file_.write(code)
