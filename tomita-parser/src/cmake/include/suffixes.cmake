# Filetypes, cmake knows them how to compile
SET(COMPILABLE_FILETYPES cpp c cxx cc h hpp hxx hh inc o def rc)

# Systemwide suffixes
SET(GENERATOR_SUFFIXES gperf in xsyn sfdl)
SET(SUFFIXES l lex xs y S proto gztproto cu asp asm ev swg pyx)
SET_APPEND(SUFFIXES ${GENERATOR_SUFFIXES})

FOREACH (__ext_ ${SUFFIXES})
    SET(IS_SUFFIX.${__ext_} TRUE)
ENDFOREACH ()

FOREACH (__ext_ ${GENERATOR_SUFFIXES})
    SET(IS_GENERATOR_SUFFIX.${__ext_} TRUE)
ENDFOREACH ()

MACRO (HAS_DOUBLE_EXTENTION __file_ __res_ __pathwe1_)
    SPLIT_FILENAME(${__pathwe1_} __ext1_ "${__file_}")
    SPLIT_FILENAME(__pathwe2_ __ext2_ "${${__pathwe1_}}")

    IF("X${__ext2_}X" STREQUAL "XX")
        SET(${__res_} no)
    ELSE ()
        SET(${__res_} yes)
    ENDIF ()
ENDMACRO ()

MACRO (BUILD_S_FILE srcfile dstfile)
    ADD_CUSTOM_COMMAND(
        OUTPUT ${dstfile}
        COMMAND ${CMAKE_C_COMPILER} -c ${srcfile} -o ${dstfile}
        MAIN_DEPENDENCY "${srcfile}"
        DEPENDS ${srcfile} ${ARGN}
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        COMMENT "Building ${dstfile} from ${srcfile} with ${CMAKE_C_COMPILER}"
    )
    SOURCE_GROUP("Custom Builds" FILES ${srcfile})
    SOURCE_GROUP("Generated" FILES ${dstfile})
    SRCS(${dstfile})
ENDMACRO ()

MACRO (BUILD_CUDA_FILE srcfile dstfile)
    SET(NVCC /usr/local/cuda/bin/nvcc)
    SET(NVCCOPTS --compiler-options -fno-strict-aliasing -I. -I/usr/local/cuda/SDK/common/inc -I/usr/local/cuda/include -I${ARCADIA_ROOT} -DUNIX -O3 ${CUDA_NVCC_FLAGS})
    ADD_CUSTOM_COMMAND(
        OUTPUT ${dstfile}
        COMMAND ${NVCC} ${NVCCOPTS} -c ${srcfile} -o ${dstfile}
        MAIN_DEPENDENCY "${srcfile}"
        DEPENDS ${srcfile} ${ARGN}
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        COMMENT "Building ${dstfile} from ${srcfile} with ${NVCC}"
    )
    SOURCE_GROUP("Custom Builds" FILES ${srcfile})
    SOURCE_GROUP("Generated" FILES ${dstfile})
    SRCS(${dstfile})
    CFLAGS(-fno-strict-aliasing -I/usr/local/cuda/SDK/common/inc -I/usr/local/cuda/include -DUNIX)
    SET_APPEND(DTMK_L -L/usr/local/cuda/lib -lcudart)
ENDMACRO ()

# =============================================================================
# ADD_SRC_BUILDRULE
#
MACRO (ADD_SRC_BUILDRULE ext srcfilename dstfilename_var)
    ENABLE(__isadded_)

    FOREACH (srcfile ${srcfilename} ${ARGN})
        GET_GLOBAL_DIRNAME(__srcitem_global_ "${srcfile}")
        DEBUGMESSAGE(2 "Checking ${__srcitem_global_}_PROPS[${${__srcitem_global_}_PROPS}]")
        SET(__src_DEPENDS_)
        IF (NOT "X${${__srcitem_global_}_PROPS}X" STREQUAL "XX")
            # Get flags and put them on src
            SET(__srcflag_name_)
            FOREACH(__srcflag_item_ ${${__srcitem_global_}_PROPS})
                IF (__srcflag_name_)
                    GET_SOURCE_FILE_PROPERTY(__srcfile_prop_ ${srcfile} ${__srcflag_name_})
                    IF (NOT __srcfile_prop_)
                        SET(__srcfile_prop_)
                    ENDIF ()
                    SET_APPEND(__srcfile_prop_ ${__srcflag_item_})
                    SET_SOURCE_FILES_PROPERTIES(${srcfilename} PROPERTIES
                        ${__srcflag_name_} "${__srcfile_prop_}")
                    IF (__srcflag_name_ STREQUAL "DEPENDS")
                        SET(__src_DEPENDS_ "${__src_DEPENDS_};${__srcfile_prop_}")
                    ENDIF ()
                    DEBUGMESSAGE(1 "ADD_SRC_BUILDRULE set ${__srcflag_name_} on ${srcfilename} with value[${__srcfile_prop_}]")
                    SET(__srcflag_name_)
                ELSE ()
                    SET(__srcflag_name_ ${__srcflag_item_})
                ENDIF ()
            ENDFOREACH ()
            IF (__src_DEPENDS_)
                SET(__src_DEPENDS_ DEPENDS ${__src_DEPENDS_})
                DEBUGMESSAGE(1 "------ __src_DEPENDS_ set to ${__src_DEPENDS_}")
            ENDIF ()
        ENDIF ()
    ENDFOREACH ()

    IF (DEFINED IS_GENERATOR_SUFFIX${ext})
        HAS_DOUBLE_EXTENTION(${srcfilename} __is_double_ext_ __srcfile_we_)
        IF (__is_double_ext_)
            GET_FILENAME_COMPONENT(__dstname_ "${__srcfile_we_}" NAME)
            GET_FILENAME_COMPONENT(__dstdir_ "${${dstfilename_var}}" PATH)

            SET(${dstfilename_var} "${__dstdir_}/${__dstname_}")
        ENDIF ()
    ENDIF ()

    IF ("${ext}" MATCHES "^.cpp$")
        # Nothing to do
    ELSEIF ("${ext}" MATCHES "^.gperf$")
        BUILDWITH_GPERF(${srcfilename} ${${dstfilename_var}} ${__src_DEPENDS_})
    ELSEIF ("${ext}" MATCHES "^.pyx$")
        BUILDWITH_CYTHON_BASE(${srcfilename} ${${dstfilename_var}})
    ELSEIF ("${ext}" MATCHES "^.l$")
        BUILDWITH_LEX(${srcfilename} ${${dstfilename_var}} ${__src_DEPENDS_})
    ELSEIF ("${ext}" MATCHES "^.lex$")
        BUILDWITH_LEX(${srcfilename} ${${dstfilename_var}} ${__src_DEPENDS_})
    ELSEIF ("${ext}" MATCHES "^.asm$")
        GET_FILENAME_COMPONENT(__S_path_ ${${dstfilename_var}} PATH)
        GET_FILENAME_COMPONENT(__S_namewe_ ${${dstfilename_var}} NAME_WE)
        SET(${dstfilename_var} ${__S_path_}/${__S_namewe_}.o)
        BUILDWITH_YASM(${srcfilename} ${${dstfilename_var}} ${__src_DEPENDS_})
    ELSEIF ("${ext}" MATCHES "^.y$")
#        BUILDWITH_BYACC(${srcfilename} ${${dstfilename_var}} ${__src_DEPENDS_})
        BUILDWITH_BISON(${srcfilename} ${${dstfilename_var}} ${__src_DEPENDS_})
    ELSEIF ("${ext}" MATCHES "^.asp$")
        BUILDWITH_HTML2CPP(${srcfilename} ${${dstfilename_var}} ${__src_DEPENDS_})
    ELSEIF ("${ext}" MATCHES "^.proto$")
        PROP_CURDIR_SET(PROJECT_WITH_PROTO yes)
        IF (PY_PROTOS_FOR)
            GET_FILENAME_COMPONENT(__proto_path_ ${${dstfilename_var}} PATH)
            GET_FILENAME_COMPONENT(__proto_namewe_ ${${dstfilename_var}} NAME_WE)
            SET(${dstfilename_var} ${__proto_path_}/${__proto_namewe_}_pb2.py)
            PY_PROTO(${srcfilename} ${${dstfilename_var}} ${ARCADIA_BUILD_ROOT}) # use ${CMAKE_CURRENT_BINARY_DIR} instead
            # We need a list with absolute file names later.
            SET_APPEND(PY_PROTOS ${${dstfilename_var}})
        ELSE ()
            BUILDWITH_PROTOC(${srcfilename} ${dstfilename_var} ${__src_DEPENDS_})
        ENDIF ()
    ELSEIF ("${ext}" MATCHES "^.gztproto$")
        PROP_CURDIR_SET(PROJECT_WITH_PROTO yes)
        FILE(RELATIVE_PATH __name_ "${CMAKE_CURRENT_SOURCE_DIR}" "${srcfilename}")
        GZT_PROTOC(${__name_})
        SET(${dstfilename_var})
    ELSEIF ("${ext}" MATCHES "^.ev$")
        PROP_CURDIR_SET(PROJECT_WITH_EV yes)
        GET_FILENAME_COMPONENT(__pb_path_ ${${dstfilename_var}} PATH)
        GET_FILENAME_COMPONENT(__pb_namewe_ ${${dstfilename_var}} NAME_WE)
        SET(${dstfilename_var} ${__pb_path_}/${__pb_namewe_}.ev.pb.cc)
        BUILDWITH_PROTOC_EVENTS(${srcfilename} ${${dstfilename_var}} ${__src_DEPENDS_})
    ELSEIF ("${ext}" MATCHES "^.S$")
        GET_FILENAME_COMPONENT(__S_path_ ${${dstfilename_var}} PATH)
        GET_FILENAME_COMPONENT(__S_namewe_ ${${dstfilename_var}} NAME_WE)
        SET(${dstfilename_var} ${__S_path_}/${__S_namewe_}.o)
        BUILD_S_FILE(${srcfilename} ${${dstfilename_var}} ${__src_DEPENDS_})
    ELSEIF ("${ext}" MATCHES "^.cu$")
        GET_FILENAME_COMPONENT(__S_path_ ${${dstfilename_var}} PATH)
        GET_FILENAME_COMPONENT(__S_namewe_ ${${dstfilename_var}} NAME_WE)
        SET(${dstfilename_var} ${__S_path_}/${__S_namewe_}.o)
        BUILD_CUDA_FILE(${srcfilename} ${${dstfilename_var}} ${__src_DEPENDS_})
    ELSEIF ("${ext}" MATCHES "^.xs$")
        IF (PERLXSCPP)
            BUILDWITH_PERLXSCPP(${srcfilename} ${${dstfilename_var}} ${__src_DEPENDS_})
        ELSEIF (PERLXS)
            GET_FILENAME_COMPONENT(__xs_path_ ${${dstfilename_var}} PATH)
            GET_FILENAME_COMPONENT(__xs_namewe_ ${${dstfilename_var}} NAME_WE)
            SET(${dstfilename_var} ${__xs_path_}/${__xs_namewe_}.c)
            BUILDWITH_PERLXS(${srcfilename} ${${dstfilename_var}} ${__src_DEPENDS_})
        ELSE ()
            MESSAGE(SEND_ERROR "Error: ${srcfilename} has an .xs extension but none of (PERLXSCPP;PERLXS) defined")
        ENDIF ()
    ELSEIF ("${ext}" MATCHES "^.swg$")
        GET_FILENAME_COMPONENT(__swg_path_ ${${dstfilename_var}} PATH)
        GET_FILENAME_COMPONENT(__swg_namewe_ ${${dstfilename_var}} NAME_WE)
        SET(${dstfilename_var} ${__swg_path_}/${__swg_namewe_}_wrap.cpp)
        BUILDWITH_SWIG(${srcfilename} ${${dstfilename_var}} ${__src_DEPENDS_})
    ELSEIF ("${ext}" MATCHES "^.in$")
        CONFIGURE_FILE(${srcfilename} ${${dstfilename_var}} @ONLY)
    ELSEIF ("${ext}" MATCHES "^.sfdl$")
        BUILD_SFDL(${srcfilename} ${${dstfilename_var}} ${__src_DEPENDS_})
    ELSE ()
        MESSAGE(SEND_ERROR "Error: Unknown extension. Don't know how to build ${srcfilename}")
        DISABLE(__isadded_)
    ENDIF ()
    IF (__isadded_)
        FOREACH (__flags_ COMPILE_FLAGS OBJECT_DEPENDS)
            GET_SOURCE_FILE_PROPERTY(__srccflags_ ${srcfilename} ${__flags_})
            IF (DEFINED ${dstfilename_var} AND NOT "${${dstfilename_var}}" STREQUAL "${srcfilename}")
                GET_SOURCE_FILE_PROPERTY(__dstcflags_ ${${dstfilename_var}} ${__flags_})
            ENDIF ()
            IF (NOT __srccflags_)
                SET(__srccflags_)
            ENDIF ()
            IF (NOT __dstcflags_)
                SET(__dstcflags_)
            ENDIF ()
            SET(__dstcflags_ ${__srccflags_} ${__dstcflags_})
            IF (__dstcflags_)
                SET_SOURCE_FILES_PROPERTIES(${${dstfilename_var}} PROPERTIES ${__flags_} "${__dstcflags_}")
                DEBUGMESSAGE(1, "------ ${${dstfilename_var}} PROPERTIES ${__flags_} ${__dstcflags_}")
            ENDIF ()
            SET(__dstcflags_)
        ENDFOREACH ()
    ENDIF ()
    DEBUGMESSAGE(1, "---- ADD_SRC_BUILDRULE: ${ext} ${srcfilename} ${${dstfilename_var}}")
ENDMACRO ()

MACRO(CHECK_SRCS)
    SET_ALL(__have_event_ __have_proto_ no)
    FOREACH (__srcs_item_ ${ARGN})
        IF (__srcs_item_ MATCHES ".*\\.proto")
            ENABLE(__have_proto_)
        ELSEIF (__srcs_item_ MATCHES ".*\\.ev")
            ENABLE(__have_event_)
            ENABLE(__have_proto_)
        ENDIF ()
    ENDFOREACH ()

    IF (__have_event_)
        PEERDIR(library/eventlog)
        BUILDAFTER(library/eventlog)
        ADDINCL(library/eventlog)
    ENDIF ()
    IF (__have_proto_)
        TOOLDIR(contrib/tools/protoc)
        PEERDIR(contrib/libs/protobuf)
        ADDINCL(contrib/libs/protobuf)
    ENDIF ()
ENDMACRO ()
