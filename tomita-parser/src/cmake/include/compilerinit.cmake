MACRO (INVALIDATE_CACHE)
    IF (NOT CACHE_ALREADY_INVALIDATE)
        SET(CACHE_ALREADY_INVALIDATE yes)
        SET(cmake_generated
            ${CMAKE_BINARY_DIR}/CMakeCache.txt
            ${CMAKE_BINARY_DIR}/cmake_install.cmake
            ${CMAKE_BINARY_DIR}/Makefile
            ${CMAKE_BINARY_DIR}/CMakeFiles
        )

        FOREACH(_cmake_file ${cmake_generated})
            IF (EXISTS ${_cmake_file})
                FILE(REMOVE_RECURSE ${_cmake_file})
            ENDIF ()
        ENDFOREACH ()
    ENDIF ()
ENDMACRO ()

SET(__no_paths_ NO_CMAKE_ENVIRONMENT_PATH NO_CMAKE_PATH NO_CMAKE_SYSTEM_PATH)

GET_FILENAME_COMPONENT(__cmake_incdir_ "${CMAKE_CURRENT_LIST_FILE}" PATH)
INCLUDE("${__cmake_incdir_}/MakefileHelpers.cmake")
INCLUDE("${__cmake_incdir_}/config.cmake")

# This code will set C/CXX
SET(__incpath_
    ${CMAKE_SOURCE_DIR}/.. ${CMAKE_SOURCE_DIR}
    ${CMAKE_BINARY_DIR}/.. ${CMAKE_BINARY_DIR}
)
INCLUDE_FROM(local.compiler.cmake ${__incpath_})
IF (NOT MY_GCC OR NOT MY_GPP)
    INCLUDE_FROM(local.cmake ${__incpath_})
ENDIF ()
#IF (WIN32 OR DARWIN)
    DEFAULT(USE_SANDBOX_COMPILER no)
#ELSE ()
#    DEFAULT(USE_SANDBOX_COMPILER yes)
#ENDIF ()

SET(GCCFILTER_CC ${CMAKE_SOURCE_DIR}/cmake/gccfilter/cgcc)
SET(GCCFILTER_CXX ${CMAKE_SOURCE_DIR}/cmake/gccfilter/cgxx)
SET(__env_toolchain_ $ENV{TOOLCHAIN})
IF(NOT "X${USE_SANDBOX_COMPILER}X" STREQUAL "XnoX" OR NOT "X${__env_toolchain_}X" STREQUAL "XX")
    SET(__ya_tool_ ${CMAKE_SOURCE_DIR}/devtools/ya/ya)
    SET(cmd ${__ya_tool_} tool --print-path)
    SET(__toolchain_)
    IF (USE_SANDBOX_COMPILER AND NOT "${USE_SANDBOX_COMPILER}" STREQUAL "yes")
        SET(__toolchain_ --toolchain=${USE_SANDBOX_COMPILER})
    ELSEIF (NOT "X${__env_toolchain_}X" STREQUAL "XX")
        SET(__toolchain_ --toolchain=${__env_toolchain_})
    ENDIF ()

    SET(cmd ${cmd} ${__toolchain_})
    EXECUTE_PROCESS(COMMAND ${cmd} cc OUTPUT_VARIABLE __ya_gcc_out_ ERROR_VARIABLE __ya_gcc_err_)
    EXECUTE_PROCESS(COMMAND ${cmd} c++ OUTPUT_VARIABLE __ya_gpp_out_ ERROR_VARIABLE __ya_gpp_err_)
    IF (NOT "X${__ya_gcc_out_}X" STREQUAL "XX")
        STRING(REGEX REPLACE "([^\r\n ]+)([\r\n ])?" "\\1" SANDBOX_GCC ${__ya_gcc_out_})
    ENDIF ()
    IF (NOT "X${__ya_gpp_out_}X" STREQUAL "XX")
        STRING(REGEX REPLACE "([^\r\n ]+)([\r\n ])?" "\\1" SANDBOX_GPP ${__ya_gpp_out_})
    ENDIF ()
    IF ("X${SANDBOX_GCC}X" STREQUAL "XX")
        MESSAGE(FATAL_ERROR "${cmd} cc\n stdout:\n${__ya_gcc_out_}\nstderr:\n${__ya_gcc_err_}")
    ENDIF ()
    IF ("X${SANDBOX_GPP}X" STREQUAL "XX")
        MESSAGE(FATAL_ERROR "${cmd} c++\n stdout:\n${__ya_gpp_out_}\nstderr:\n${__ya_gpp_err_}")
    ENDIF ()

    SET(cmd_ask_werror ${__ya_tool_} tool ${__toolchain_} --get-param=no_werror cc)
    EXECUTE_PROCESS(COMMAND ${cmd_ask_werror} OUTPUT_VARIABLE __ya_werror_out_ ERROR_VARIABLE __ya_werror_err_)
    IF (NOT "X${__ya_werror_out_}X" STREQUAL "XX")
        STRING(REGEX REPLACE "([^\r\n ]+)([\r\n ])?" "\\1" __no_werror_ ${__ya_werror_out_})
    ENDIF ()
    IF ("${__no_werror_}" STREQUAL "True")
        SET(ENV{SANDBOX_COMPILER_NO_WERROR} yes)
    ELSEIF ("${__no_werror_}" STREQUAL "False")
        SET(ENV{SANDBOX_COMPILER_NO_WERROR} no)
    ENDIF ()
ENDIF ()

DEFAULT(__no_werror_ "False")
IF (NOT "${__no_werror_}" STREQUAL "True")
    SET($ENV{SANDBOX_COMPILER_NO_WERROR} "")
ENDIF ()

IF (USE_CLANG)
    SET(CLDRV "${__cmake_incdir_}/../scripts/cldriver")
    SET(MY_GPP ${CLDRV})
    SET(MY_GCC ${CLDRV})

    SET(AR ${CLDRV})
    SET(CMAKE_AR ${AR})

    SET(RANLIB ${CLDRV})
    SET(CMAKE_RANLIB ${RANLIB})

    SET(USE_STATIC_CPP_RUNTIME no)
ENDIF ()

SET(ENVCC $ENV{CC})
IF (NOT "X${SANDBOX_GCC}X" STREQUAL "XX")
    SET(CC ${SANDBOX_GCC})
ELSEIF (MY_GCC)
    SET(CC ${MY_GCC})
ELSEIF (CMAKE_C_COMPILER AND NOT "${CMAKE_C_COMPILER}" STREQUAL "${GCCFILTER_CC}")
    SET(CC ${CMAKE_C_COMPILER})
ELSEIF (ENVCC)
    SET(CC ${ENVCC})
ELSEIF (NOT WIN32)
    FIND_PROGRAM(CC NAMES gcc47 gcc-4.7 gcc44 gcc-4.4 gcc43 gcc-4.3 PATHS ${__no_paths_})
ENDIF ()

IF(EXISTS ${CC})
    SET(CC_PATH ${CC})
ELSE ()
    UNSET(CC_PATH CACHE)
    FIND_PROGRAM(CC_PATH NAMES ${CC} PATHS ${__no_paths_})
ENDIF ()

SET(ENVCXX $ENV{CXX})
IF (NOT "X${SANDBOX_GPP}X" STREQUAL "XX")
    SET(CXX ${SANDBOX_GPP})
ELSEIF (MY_GPP)
    SET(CXX ${MY_GPP})
ELSEIF (CMAKE_CXX_COMPILER AND NOT "${CMAKE_CXX_COMPILER}" STREQUAL "${GCCFILTER_CXX}")
    SET(CXX ${CMAKE_CXX_COMPILER})
ELSEIF (ENVCXX)
    SET(CXX ${ENVCXX})
ELSEIF (NOT WIN32)
    FIND_PROGRAM(CXX NAMES g++47 g++-4.7 g++44 g++-4.4 g++43 g++-4.3 PATHS ${__no_paths_})
ENDIF ()

IF(EXISTS ${CXX})
    SET(CXX_PATH ${CXX})
ELSE ()
    UNSET(CXX_PATH CACHE)
    FIND_PROGRAM(CXX_PATH NAMES ${CXX} PATHS ${__no_paths_})
ENDIF ()

IF (ORIGINAL_C_COMPILER AND NOT "X${ORIGINAL_C_COMPILER}X" STREQUAL "X${CC_PATH}X")
    INVALIDATE_CACHE()
ELSEIF (ORIGINAL_CXX_COMPILER AND NOT "X${ORIGINAL_CXX_COMPILER}X" STREQUAL "X${CXX_PATH}X")
    INVALIDATE_CACHE()
ENDIF ()

IF (DEFINED USE_GCCFILTER AND NOT "X${CMAKE_C_COMPILER}X" STREQUAL "X${GCCFILTER_CC}X")
    INVALIDATE_CACHE()
ELSEIF (NOT DEFINED USE_GCCFILTER AND "X${CMAKE_C_COMPILER}X" STREQUAL "X${GCCFILTER_CC}X")
    INVALIDATE_CACHE()
ENDIF ()

IF (CC_PATH)
    SET(ORIGINAL_C_COMPILER ${CC_PATH} CACHE FILEPATH "Original C compiler" FORCE)
    IF (USE_GCCFILTER)
        FILE(WRITE ${CMAKE_SOURCE_DIR}/.gcc-compiler "${ORIGINAL_C_COMPILER}")
        SET(CC_PATH ${GCCFILTER_CC})
    ENDIF ()
    SET(CMAKE_C_COMPILER ${CC_PATH} CACHE FILEPATH "C compiler" FORCE)
ENDIF ()

IF (CXX_PATH)
    SET(ORIGINAL_CXX_COMPILER ${CXX_PATH} CACHE FILEPATH "Original C++ compiler" FORCE)
    IF (USE_GCCFILTER)
        FILE(WRITE ${CMAKE_SOURCE_DIR}/.gxx-compiler "${ORIGINAL_CXX_COMPILER}")
        SET(CXX_PATH ${GCCFILTER_CXX})
    ENDIF ()
    SET(CMAKE_CXX_COMPILER ${CXX_PATH} CACHE FILEPATH "C++ compiler" FORCE)
ENDIF ()

# uncomment for debug
# MESSAGE("SANDBOX_GCC = ${SANDBOX_GCC}")
# MESSAGE("SANDBOX_GPP = ${SANDBOX_GPP}")
# MESSAGE("CC = ${CC}")
# MESSAGE("CXX = ${CXX}")
# MESSAGE("CC_PATH = ${CC_PATH}")
# MESSAGE("CXX_PATH = ${CXX_PATH}")
# MESSAGE("ORIGINAL_CXX_COMPILER = ${ORIGINAL_CXX_COMPILER}")
# MESSAGE("ORIGINAL_C_COMPILER = ${ORIGINAL_C_COMPILER}")
# MESSAGE("CMAKE_CXX_COMPILER = ${CMAKE_CXX_COMPILER}")
# MESSAGE("CMAKE_C_COMPILER = ${CMAKE_C_COMPILER}")
