MACRO(PREPARE_SCRIPT_ARGS res arg dir root)
    FOREACH(__var_ ${ARGN})
        STRING(REPLACE "${__var_}" "${dir}/${__var_}" __new_arg_ "${__arg_}")
        IF(NOT "${__new_arg_}" STREQUAL "${__arg_}" )
            IF (EXISTS ${root}/${__arg_})
                SET(${res} ${root}/${__arg_})
            ELSE ()
                SET(${res} ${__new_arg_})
            ENDIF ()
        ENDIF ()
    ENDFOREACH ()
ENDMACRO ()

MACRO (PREPARE_TOOLS res arg)
    FOREACH(__tool_ ${ARGN})
        IF("${__tool_}" STREQUAL "${__arg_}" )
            TOOLDIR_EX(${__tool_} __tool_path_)
            SET(${res} ${__tool_path_})
        ENDIF ()
    ENDFOREACH ()
ENDMACRO ()

MACRO (GET_BIN_ABS_PATH full_path file_name)
    GET_ABS_PATH_BASE(${full_path} ${file_name} ${CMAKE_CURRENT_BINARY_DIR} ${ARCADIA_BUILD_ROOT})
ENDMACRO ()

MACRO (GET_SRC_ABS_PATH full_path file_name)
    GET_ABS_PATH_BASE(${full_path} ${file_name} ${CMAKE_CURRENT_SOURCE_DIR} ${ARCADIA_ROOT})
ENDMACRO ()

MACRO (GET_ABS_PATH_BASE full_path file_name dir_for_search root)
    IF (IS_ABSOLUTE ${file_name})
        SET(${full_path} ${file_name})
    ELSEIF (EXISTS ${root}/${file_name})
        SET(${full_path} ${root}/${file_name})
    ELSE ()
        SET(${full_path} ${dir_for_search}/${file_name})
    ENDIF ()
ENDMACRO ()

MACRO (RESET_SCRIPT_FLAGS)
    SET(__next_cwd_)
    SET(__next_input_)
    SET(__next_output_)
    SET(__next_tool_)
    SET(__next_stdout_)
    SET(__next_stdin_)
    SET(__next_output_incls_)
ENDMACRO ()

MACRO (SCRIPT tool script_name)
    IF ("X${script_name}X" STREQUAL "XX")
        SET(script)
    ELSEIF (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${script_name})
        SET(script ${CMAKE_CURRENT_SOURCE_DIR}/${script_name})
    ELSEIF (EXISTS ${script_name})
        SET(script ${script_name})
    ELSE ()
        MESSAGE("Absolute path to script ${script_name} not found")
    ENDIF ()

    SET(__cwd_ ${CMAKE_CURRENT_BINARY_DIR})
    SET(__script_args_)
    SET(__inputs_)
    SET(__outputs_)
    SET(__tools_)
    SET(__stdout_file_ "")
    SET(__stdin_file_)
    RESET_SCRIPT_FLAGS()
    FOREACH(__item_ ${ARGN})
        IF ("${__item_}" STREQUAL "IN")
            RESET_SCRIPT_FLAGS()
            SET(__next_input_ yes)
        ELSEIF ("${__item_}" STREQUAL "OUT")
            RESET_SCRIPT_FLAGS()
            SET(__next_output_ yes)
        ELSEIF ("${__item_}" STREQUAL "TOOL")
            RESET_SCRIPT_FLAGS()
            SET(__next_tool_ yes)
        ELSEIF ("${__item_}" STREQUAL "STDOUT")
            RESET_SCRIPT_FLAGS()
            SET(__next_stdout_ yes)
        ELSEIF ("${__item_}" STREQUAL "STDIN")
            RESET_SCRIPT_FLAGS()
            SET(__next_stdin_ yes)
        ELSEIF ("${__item_}" STREQUAL "CWD")
            RESET_SCRIPT_FLAGS()
            SET(__next_cwd_ yes)
        ELSEIF ("${__item_}" STREQUAL "OUTPUT_INCLUDES")
            RESET_SCRIPT_FLAGS()
            SET(__next_output_incls_ yes)
        ELSE ()
            IF (__next_input_)
                SET_APPEND(__inputs_ ${__item_})
            ELSEIF (__next_output_)
                SET_APPEND(__outputs_ ${__item_})
            ELSEIF (__next_tool_)
                SET_APPEND(__tools_ ${__item_})
            ELSEIF (__next_stdout_)
                SET(__stdout_file_ ${__item_})
            ELSEIF (__next_stdin_)
                SET(__stdin_file_ ${__item_})
            ELSEIF (__next_cwd_)
                SET(__cwd_ ${__item_})
            ELSEIF (__next_output_incls_)
                # OUTPUT_INCLUDES need only for ymake-distbs
            ELSE ()
                SET_APPEND(__script_args_ ${__item_})
            ENDIF ()
        ENDIF ()
    ENDFOREACH ()

    IF (NOT "x${__stdout_file_}x" STREQUAL "xx")
        GET_BIN_ABS_PATH(__stdout_full_path_ ${__stdout_file_})
        SET_APPEND(__outputs_ ${__stdout_full_path_})
        SET(__stdout_file_ ">" "${__stdout_full_path_}")
    ENDIF ()

    IF (NOT "x${__stdin_file_}x" STREQUAL "xx")
        GET_SRC_ABS_PATH(__stdin_full_path_ ${__stdin_file_})
        SET_APPEND(__inputs_ ${__stdin_full_path_})
        SET(__stdin_file_ "<" "${__stdin_full_path_}")
    ENDIF ()

    SET(__new_args_)
    FOREACH(__arg_ ${__script_args_})
        SET(result ${__arg_})
        IF (NOT IS_ABSOLUTE ${__arg_})
            PREPARE_SCRIPT_ARGS(result ${__arg_} ${CMAKE_CURRENT_SOURCE_DIR} ${ARCADIA_ROOT} ${__inputs_})
            PREPARE_SCRIPT_ARGS(result ${__arg_} ${CMAKE_CURRENT_BINARY_DIR} ${ARCADIA_BUILD_ROOT} ${__outputs_})
            PREPARE_TOOLS(result ${__arg_} ${__tools_})
        ENDIF ()
        SET_APPEND(__new_args_ ${result})
    ENDFOREACH ()
    SET(__script_args_ ${__new_args_})

    SET(__new_inputs_)
    FOREACH(__in_ ${__inputs_})
        GET_SRC_ABS_PATH(__in_full_ ${__in_})
        SET_APPEND(__new_inputs_ "${__in_full_}")
    ENDFOREACH ()
    SET(__inputs_ ${__new_inputs_})

    SET(__new_outputs_)
    FOREACH(__out_ ${__outputs_})
        GET_BIN_ABS_PATH(__out_full_ ${__out_})
        SET_APPEND(__new_outputs_ "${__out_full_}")
    ENDFOREACH ()
    SET(__outputs_ ${__new_outputs_})

    IF (NOT "X${__tools_}X" STREQUAL "XX")
        SET(__tools_message "TOOLS: ${__tools_}")
    ELSE ()
        SET(__tools_message)
    ENDIF ()

    GET_FILENAME_COMPONENT(__tool_short_name "${tool}" NAME)
    GET_FILENAME_COMPONENT(__script_short_name "${script}" NAME)
    STRING(LENGTH "${__script_args_}" __args_length)
    SET(__short_script_args_ "${__script_args_}")
    IF (__args_length GREATER "70")
        STRING(SUBSTRING "${__script_args_}" 0 70 __short_script_args_)
    ENDIF ()
    SET(__tool_comment "Executing: ${__tool_short_name} ${__script_short_name} ${__short_script_args_}...")

    SET(__tool_for_depends ${tool})
    IF (__tool_for_depends STREQUAL "lua")
        SET(__tool_for_depends)
    ENDIF ()

    ADD_CUSTOM_COMMAND(
        OUTPUT
            ${__outputs_}
        DEPENDS
            ${__tool_for_depends} ${script} ${__inputs_} ${__tools_}
        COMMAND
            ${tool} ${script} ${__script_args_} ${__stdin_file_} ${__stdout_file_} || ${RM} ${__outputs_}
        WORKING_DIRECTORY ${__cwd_}
        COMMENT "${__tool_comment}"
    )

    SET(__outputs_to_srcs_)
    FOREACH(__out_ ${__outputs_})
        SPLIT_FILENAME(__file_namewe_ __file_ext_ ${__out_})
        IF (NOT "X${__file_ext_}X" STREQUAL "XX")
            IS_COMPILABLE_TYPE(__compilable_ ${__file_ext_})
            IF((__compilable_ OR DEFINED IS_SUFFIX${__file_ext_}) AND (NOT (${__file_ext_} STREQUAL ".h" OR ${__file_ext_} STREQUAL ".hpp")))
                SET_APPEND(__outputs_to_srcs_ ${__out_})
            ENDIF ()

            IF ("${__file_ext_}" STREQUAL ".h" OR "${__file_ext_}" STREQUAL ".hpp")
                DIR_ADD_GENERATED_INC(${__out_})
            ENDIF ()
        ENDIF ()
    ENDFOREACH ()

    SRCS(${__outputs_to_srcs_})
ENDMACRO ()

MACRO(GET_PYTHON_EXECUTABLE result)
    IF (USE_ARCADIA_PYTHON)
        TOOLDIR_EX(
            contrib/tools/python/bootstrap arcpython
        )

        SET(${result} ${arcpython})
    ELSE ()
        SET(${result} ${PYTHON_EXECUTABLE})
    ENDIF ()
ENDMACRO ()

MACRO(PYTHON script)
    GET_PYTHON_EXECUTABLE(__python_ex_)
    SCRIPT(${__python_ex_} ${script} ${ARGN})
ENDMACRO ()

MACRO(LUA script)
#    TOOLDIR_EX(
#        tools/lua arclua
#    )
#    SCRIPT(${arclua} ${script} ${ARGN})
     SCRIPT("lua" ${script} ${ARGN})
ENDMACRO ()

MACRO(RUN_PROGRAM tool_path)
    TOOLDIR_EX(
        ${tool_path} __tool_name_
    )

    SCRIPT(${__tool_name_} "" ${ARGN})
ENDMACRO ()
